@group
    @key=main
    @brief=
    @title=Gehtsoft Measurements Library
    @ingroup=
    @transform=yes
    @sortgroups=no

    [b]Gehtsoft.Measurements[/b]

    The C# library to manipulate with various measurments (e.g. distances, weight, angles, temperatures and so on) expressed in various units (e.g. distances in inches, yards, meters)

    Currently distance/length, velocity, weight, angular measurements and energy units are supported.

    The library is shared under LGPL license.

    [b]Using Library[/b]

    The core class of the library is a generic structure [clink=Gehtsoft.Measurements.Measurement]Measurement[/clink].
    The structure accepts an enumeration as a parameter and this enumeration defines the measurement unit to be used:

    @example
        @highlight=cs
        @show=always
    !    Measurement<DistanceUnit> v = new Measurement<DistanceUnit>(10, DistanceUnit.Feet);
    @end

    You can then manipulate this value using C# operator, format them or convert it into another unit:

    @example
        @highlight=cs
        @show=always
     !    var v1 = v * 2;
     !    string v = v.ToString("N3");
     !    var v2 = v1.To(DistanceUnit.Meter);
    @end

    The class fully supports serialization using [c]System.Text.Json[/c], [c]System.Xml.Serialization.XmlSerializer[/c] and Binaron.Serializer (see [eurl=https://github.com/zachsaw/Binaron.Serializer]see at github[/eurl]).

    [b]Defining your own units[/b]

    You can define your own measurment units by creating a enumeration and mark it using Unit and Conversion attributes. The first attribute defines the unit name and the default accuracy of the values. The second attribute defines the rules of the conversion. One unit must always be a "base" unit, and conversion rules for other units defines how to convert the specified unit into a base unit.

    @example
        @highlight=cs
        @show=always
    !   enum MyWeightUnit
    !   {
    !       //1 gram
    !       [Unit("g", 3)]
    !       [Conversion(ConversionOperation.Base)]
    !       Gram,
    !
    !       //1 kilogram (1 kilogram = 1000 gram)
    !       [Unit("kg", 1)]
    !       [Conversion(ConversionOperation.Multiply, 1000)]
    !       Kilogram,
    !   }
    @end
@end